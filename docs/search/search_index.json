{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"airflow-indexima \u00b6 Versions following Semantic Versioning Overview \u00b6 Indexima Airflow integration based on pyhive. This project is used in our prod environment with success. As it a young project, take care of change, any help is welcome :) Setup \u00b6 Requirements \u00b6 Python 3.6+ Installation \u00b6 Install this library directly into an activated virtual environment: $ pip install airflow-indexima or add it to your Poetry project: $ poetry add airflow-indexima or you could use it as an Airflow plugin Usage \u00b6 After installation, the package can imported: $ python >>> import airflow_indexima >>> airflow_indexima.__version__ See Api documentation a simple query \u00b6 from airflow_indexima.operators import IndeximaQueryRunnerOperator ... with dag : ... op = IndeximaQueryRunnerOperator ( task_id = 'my-task-id' , sql_query = 'DELETE FROM Client WHERE GRPD = 1' , indexima_conn_id = 'my-indexima-connection' ) ... a load into indexima \u00b6 from airflow_indexima.operators.indexima import IndeximaLoadDataOperator ... with dag : ... op = IndeximaLoadDataOperator ( task_id = 'my-task-id' , indexima_conn_id = 'my-indexima-connection' , target_table = 'Client' , source_select_query = 'select * from dsi.client' , truncate = True , load_path_uri = 'jdbc:redshift://my-private-instance.com:5439/db_client?ssl=true&user=airflow-user&password=XXXXXXXX' ) ... get load path uri from Connection \u00b6 In order to get jdbc uri from an Airflow Connection, you could use: get_redshift_load_path_uri get_postgresql_load_path_uri from module airflow_indexima.uri Both method have this profile: Callable[[str, Optional[ConnectionDecorator]], str] Example: get_postgresql_load_path_uri(connection_id='my_conn') >> 'jdbc:postgresql://my-db:5432/db_client?ssl=true&user=airflow-user&password=XXXXXXXX' Indexima Connection \u00b6 Authentication \u00b6 PyHive supported authentication mode: 'NONE': needs a username without password 'CUSTOM': needs a username and password (default mode) 'LDAP': needs a username and password 'KERBEROS': need a kerberos service name 'NOSASL': corresponds to hive.server2.authentication=NOSASL in hive-site.xml Configuration \u00b6 You could set those parameters: host (str): The host to connect to. port (int): The (TCP) port to connect to. timeout_seconds ([int]): define the socket timeout in second (default None) socket_keepalive ([bool]): enable TCP keepalive, default false. auth (str): authentication mode username ([str]): username to login password ([str]): password to login kerberos_service_name ([str]): kerberos service name host , port , username and password came from airflow Connection configuration. timeout_seconds , socket_keepalive , auth and kerberos_service_name parameters can came from: attribut on Hook/Operator class Airflow Connection in extra parameter, like this: '{\"auth\": \"CUSTOM\", \"timeout_seconds\": 90, \"socket_keepalive\": true}' Setted attribut override airflow connection configuration. You could add a decorator function in order to post process Connection before usage. This decorator will be executed after connection configuration (see next section). customize Connection credential access \u00b6 If you use another backend to store your password (like AWS SSM), you could define a decorator and use it as a function in your dag. from airflow.models import Connection from airflow import DAG from airdlow_indexima.uri import define_load_path_factory , get_redshift_load_path_uri def my_decorator ( conn : Connection ) -> Connection : # conn instance will be not shared, and use only on connection request conn . password = get_ssm_parameter ( param_name = f ' {conn.conn_id} . {con.login} ' ) return conn dag = DAG ( dag_id = 'my_dag' , user_defined_macros = { # we define a macro get_load_path_uri 'get_load_path_uri' : define_load_path_factory ( conn_id = 'my-redshift-connection' , decorator = my_decorator , factory = get_redshift_load_path_uri ) }, ... ) with dag : ... op = IndeximaLoadDataOperator ( task_id = 'my-task-id' , indexima_conn_id = 'my-indexima-connection' , target_table = 'Client' , source_select_query = 'select * from dsi.client' , truncate = True , load_path_uri = '{{ get_load_path_uri() }}' ) ... a Connection decorator must follow this type: ConnectionDecorator = Callable[[Connection], Connection] define_load_path_factory is a function which take: a connnection identifier a decorator ConnectionDecorator an uri factory UriGeneratorFactory = Callable[[str, Optional[ConnectionDecorator]], str] and return a function with no argument which can be called as a macro in dag's operator. Optional connection parameters \u00b6 On each operator you could set this member: auth (Optional[str]): authentication mode (default: {'CUSTOM'}) kerberos_service_name (Optional[str]): optional kerberos service name timeout_seconds (Optional[Union[int, datetime.timedelta]]): define the socket timeout in second (could be an int or a timedelta) socket_keepalive (Optional[bool]): enable TCP keepalive. Note: if execution_timeout is set, it will be used as default value for timeout_seconds. Production Feedback \u00b6 In production, you could have few strange behaviour like those that we have meet. \"TSocket read 0 bytes\" \u00b6 You could fine this issue https://github.com/dropbox/PyHive/issues/240 on long load query running. Try this in sequence: check your operator configuration, and set timeout_seconds member to 3600 second for example. You could have a different behaviour when running a dag with/without airflow context in docker container. if your facing a broken pipe, after 300s, and you have an AWS NLB V2 : Read again network-load-balancers , and focus on this: Elastic Load Balancing sets the idle timeout value for TCP flows to 350 seconds. You cannot modify this value. For TCP listeners, clients or targets can use TCP keepalive packets to reset the idle timeout. TCP keepalive packets are not supported for TLS listeners. We have tried for you the \"socket_keep_alive\", and it did not work at all. Our solution was to remove our NLB and use a simple dns A field on indexima master. \"utf-8\" or could not read byte [0] \u00b6 Be very welcome to add { \"serialization.encoding\": \"utf-8\"} in hive_configuration member of IndeximaHook. This setting is set in IndeximaHook. init , may you override it ? Playing Airflow without Airflow Server \u00b6 When I was trying many little things and deals with hive stuff, i wrote a single script that help me a lot. Feel free to use it (or not) to set your dag by yourself: import os import datetime from airflow.hooks.base_hook import BaseHook from airflow import DAG from airflow_indexima.operators.indexima import IndeximaLoadDataOperator # here we create our Airflow Connection os . environ [ 'AIRFLOW_CONN_INDEXIMA_ID' ] = 'hive://my-user:my-password@my-server:10000/default' conn = BaseHook . get_connection ( 'indexima_id' ) dag = DAG ( dag_id = 'my_dag' , default_args = { 'start_date' : datetime . datetime ( year = 2019 , month = 12 , day = 1 ), 'depends_on_past' : False , 'email_on_failure' : False , 'email' : [], }, ) with dag : load_operator = IndeximaLoadDataOperator ( task_id = 'my_task' , indexima_conn_id = 'indexima_id' , target_table = 'my_table' , source_select_query = ( \"select * from source_table where \" \"creation_date_tms between '2019-11-30T00:00:00+00:00' and '2019-11-30T12:59:59.000999+00:00'\" ), truncate = True , truncate_sql = ( \"DELETE FROM my_table WHERE \" \"creation_date_tms between '2019-11-30T00:00:00+00:00' and '2019-11-30T12:59:59.000999+00:00'\" ), load_path_uri = 'jdbc:postgresql://myserver:5439/db_common?user=etl_user&password=a_strong_password&ssl=true' , retries = 2 , execution_timeout = datetime . timedelta ( hours = 3 ), sla = datetime . timedelta ( hours = 1 , minutes = 30 ), ) # here we run the dag load_operator . execute ( context = {}) del os . environ [ 'AIRFLOW_CONN_INDEXIMA_ID' ] License \u00b6 The MIT License (MIT) Contributing \u00b6 See Contributing Thanks \u00b6 Thanks to @bartosz25 for his help with hive connection details...","title":"Home"},{"location":"#airflow-indexima","text":"Versions following Semantic Versioning","title":"airflow-indexima"},{"location":"#overview","text":"Indexima Airflow integration based on pyhive. This project is used in our prod environment with success. As it a young project, take care of change, any help is welcome :)","title":"Overview"},{"location":"#setup","text":"","title":"Setup"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"Install this library directly into an activated virtual environment: $ pip install airflow-indexima or add it to your Poetry project: $ poetry add airflow-indexima or you could use it as an Airflow plugin","title":"Installation"},{"location":"#usage","text":"After installation, the package can imported: $ python >>> import airflow_indexima >>> airflow_indexima.__version__ See Api documentation","title":"Usage"},{"location":"#a-simple-query","text":"from airflow_indexima.operators import IndeximaQueryRunnerOperator ... with dag : ... op = IndeximaQueryRunnerOperator ( task_id = 'my-task-id' , sql_query = 'DELETE FROM Client WHERE GRPD = 1' , indexima_conn_id = 'my-indexima-connection' ) ...","title":"a simple query"},{"location":"#a-load-into-indexima","text":"from airflow_indexima.operators.indexima import IndeximaLoadDataOperator ... with dag : ... op = IndeximaLoadDataOperator ( task_id = 'my-task-id' , indexima_conn_id = 'my-indexima-connection' , target_table = 'Client' , source_select_query = 'select * from dsi.client' , truncate = True , load_path_uri = 'jdbc:redshift://my-private-instance.com:5439/db_client?ssl=true&user=airflow-user&password=XXXXXXXX' ) ...","title":"a load into indexima"},{"location":"#get-load-path-uri-from-connection","text":"In order to get jdbc uri from an Airflow Connection, you could use: get_redshift_load_path_uri get_postgresql_load_path_uri from module airflow_indexima.uri Both method have this profile: Callable[[str, Optional[ConnectionDecorator]], str] Example: get_postgresql_load_path_uri(connection_id='my_conn') >> 'jdbc:postgresql://my-db:5432/db_client?ssl=true&user=airflow-user&password=XXXXXXXX'","title":"get load path uri from Connection"},{"location":"#indexima-connection","text":"","title":"Indexima Connection"},{"location":"#authentication","text":"PyHive supported authentication mode: 'NONE': needs a username without password 'CUSTOM': needs a username and password (default mode) 'LDAP': needs a username and password 'KERBEROS': need a kerberos service name 'NOSASL': corresponds to hive.server2.authentication=NOSASL in hive-site.xml","title":"Authentication"},{"location":"#configuration","text":"You could set those parameters: host (str): The host to connect to. port (int): The (TCP) port to connect to. timeout_seconds ([int]): define the socket timeout in second (default None) socket_keepalive ([bool]): enable TCP keepalive, default false. auth (str): authentication mode username ([str]): username to login password ([str]): password to login kerberos_service_name ([str]): kerberos service name host , port , username and password came from airflow Connection configuration. timeout_seconds , socket_keepalive , auth and kerberos_service_name parameters can came from: attribut on Hook/Operator class Airflow Connection in extra parameter, like this: '{\"auth\": \"CUSTOM\", \"timeout_seconds\": 90, \"socket_keepalive\": true}' Setted attribut override airflow connection configuration. You could add a decorator function in order to post process Connection before usage. This decorator will be executed after connection configuration (see next section).","title":"Configuration"},{"location":"#customize-connection-credential-access","text":"If you use another backend to store your password (like AWS SSM), you could define a decorator and use it as a function in your dag. from airflow.models import Connection from airflow import DAG from airdlow_indexima.uri import define_load_path_factory , get_redshift_load_path_uri def my_decorator ( conn : Connection ) -> Connection : # conn instance will be not shared, and use only on connection request conn . password = get_ssm_parameter ( param_name = f ' {conn.conn_id} . {con.login} ' ) return conn dag = DAG ( dag_id = 'my_dag' , user_defined_macros = { # we define a macro get_load_path_uri 'get_load_path_uri' : define_load_path_factory ( conn_id = 'my-redshift-connection' , decorator = my_decorator , factory = get_redshift_load_path_uri ) }, ... ) with dag : ... op = IndeximaLoadDataOperator ( task_id = 'my-task-id' , indexima_conn_id = 'my-indexima-connection' , target_table = 'Client' , source_select_query = 'select * from dsi.client' , truncate = True , load_path_uri = '{{ get_load_path_uri() }}' ) ... a Connection decorator must follow this type: ConnectionDecorator = Callable[[Connection], Connection] define_load_path_factory is a function which take: a connnection identifier a decorator ConnectionDecorator an uri factory UriGeneratorFactory = Callable[[str, Optional[ConnectionDecorator]], str] and return a function with no argument which can be called as a macro in dag's operator.","title":"customize Connection credential access"},{"location":"#optional-connection-parameters","text":"On each operator you could set this member: auth (Optional[str]): authentication mode (default: {'CUSTOM'}) kerberos_service_name (Optional[str]): optional kerberos service name timeout_seconds (Optional[Union[int, datetime.timedelta]]): define the socket timeout in second (could be an int or a timedelta) socket_keepalive (Optional[bool]): enable TCP keepalive. Note: if execution_timeout is set, it will be used as default value for timeout_seconds.","title":"Optional connection parameters"},{"location":"#production-feedback","text":"In production, you could have few strange behaviour like those that we have meet.","title":"Production Feedback"},{"location":"#tsocket-read-0-bytes","text":"You could fine this issue https://github.com/dropbox/PyHive/issues/240 on long load query running. Try this in sequence: check your operator configuration, and set timeout_seconds member to 3600 second for example. You could have a different behaviour when running a dag with/without airflow context in docker container. if your facing a broken pipe, after 300s, and you have an AWS NLB V2 : Read again network-load-balancers , and focus on this: Elastic Load Balancing sets the idle timeout value for TCP flows to 350 seconds. You cannot modify this value. For TCP listeners, clients or targets can use TCP keepalive packets to reset the idle timeout. TCP keepalive packets are not supported for TLS listeners. We have tried for you the \"socket_keep_alive\", and it did not work at all. Our solution was to remove our NLB and use a simple dns A field on indexima master.","title":"\"TSocket read 0 bytes\""},{"location":"#utf-8-or-could-not-read-byte-0","text":"Be very welcome to add { \"serialization.encoding\": \"utf-8\"} in hive_configuration member of IndeximaHook. This setting is set in IndeximaHook. init , may you override it ?","title":"\"utf-8\" or could not read byte [0]"},{"location":"#playing-airflow-without-airflow-server","text":"When I was trying many little things and deals with hive stuff, i wrote a single script that help me a lot. Feel free to use it (or not) to set your dag by yourself: import os import datetime from airflow.hooks.base_hook import BaseHook from airflow import DAG from airflow_indexima.operators.indexima import IndeximaLoadDataOperator # here we create our Airflow Connection os . environ [ 'AIRFLOW_CONN_INDEXIMA_ID' ] = 'hive://my-user:my-password@my-server:10000/default' conn = BaseHook . get_connection ( 'indexima_id' ) dag = DAG ( dag_id = 'my_dag' , default_args = { 'start_date' : datetime . datetime ( year = 2019 , month = 12 , day = 1 ), 'depends_on_past' : False , 'email_on_failure' : False , 'email' : [], }, ) with dag : load_operator = IndeximaLoadDataOperator ( task_id = 'my_task' , indexima_conn_id = 'indexima_id' , target_table = 'my_table' , source_select_query = ( \"select * from source_table where \" \"creation_date_tms between '2019-11-30T00:00:00+00:00' and '2019-11-30T12:59:59.000999+00:00'\" ), truncate = True , truncate_sql = ( \"DELETE FROM my_table WHERE \" \"creation_date_tms between '2019-11-30T00:00:00+00:00' and '2019-11-30T12:59:59.000999+00:00'\" ), load_path_uri = 'jdbc:postgresql://myserver:5439/db_common?user=etl_user&password=a_strong_password&ssl=true' , retries = 2 , execution_timeout = datetime . timedelta ( hours = 3 ), sla = datetime . timedelta ( hours = 1 , minutes = 30 ), ) # here we run the dag load_operator . execute ( context = {}) del os . environ [ 'AIRFLOW_CONN_INDEXIMA_ID' ]","title":"Playing Airflow without Airflow Server"},{"location":"#license","text":"The MIT License (MIT)","title":"License"},{"location":"#contributing","text":"See Contributing","title":"Contributing"},{"location":"#thanks","text":"Thanks to @bartosz25 for his help with hive connection details...","title":"Thanks"},{"location":"api-overview/","text":"API Overview \u00b6","title":"Overview"},{"location":"api-overview/#api-overview","text":"","title":"API Overview"},{"location":"changelog/","text":"2.2.1 (soon) \u00b6 fix api link on readme fix readme info 2.2.0 ((2019-12-12) \u00b6 add dry_run mode on operator refactor uri module (simplier code) add jdbc uri generator for postgresql support full syntax of load path query add a bunch of test unit (not too soon...) and reactivate coverage integrate hive transport factory in order to manage socket configuration add support for authentication mode: ldap, custom, kerberos and none add more documentation use thrift 0.13.0 use a new connection on rollback log original error before rollback use information from https://www.ericlin.me/2015/07/how-to-configue-session-timeout-in-hive/ add 'hive_configuration' member to IndeximaHook change default time out to None use a single cursor instance per hook process set hive connection serialization encoding 'UTF-8' timeout can be specified with an int or a timedelta use execution_timeout member on operator to set timeout if this one is not specified 2.1.0 (2019-12-04) \u00b6 manage error return from indexima define IndeximaAirflowPlugin 2.0.6 (2019-12-03) \u00b6 fix usage of connection.extra parameter 2.0.5 (2019-12-03) \u00b6 fix indexima hook: (username/login) field access (auth) decorator applied before usage fix IndeximaLoadDataOperator field access fix redshit uri base 2.0.4 (2019-12-03) \u00b6 fix connection retrieval in get_redshift_load_path_uri fix redshit uri port 2.0.3 (2019-12-03) \u00b6 align dependencies constraint on thrift to pyhive and thrift-sasl 2.0.2 (2019-12-03) \u00b6 unlock fixed python 3.6.4 to ^3.6 2.0.1 (2019-12-03) \u00b6 fix default truncate query 2.0.0 (2019-12-03) \u00b6 escape quote in select query of RedshiftIndexima Operator initiate airflow contrib package complete docstyle introduce uri utilities expose ConnectionDecorator add more example 1.0.1 (2019-11-28) \u00b6 add example remove work in progress 1.0.0 (2019-11-27) \u00b6 initial project structure based on geronimo-iia/template-python add Hook implementation add Simple Operator add pyhive, ... configure documentation add a way to customize credentials retreival (with a prepare connection function handler)","title":"Release Notes"},{"location":"changelog/#221-soon","text":"fix api link on readme fix readme info","title":"2.2.1 (soon)"},{"location":"changelog/#220-2019-12-12","text":"add dry_run mode on operator refactor uri module (simplier code) add jdbc uri generator for postgresql support full syntax of load path query add a bunch of test unit (not too soon...) and reactivate coverage integrate hive transport factory in order to manage socket configuration add support for authentication mode: ldap, custom, kerberos and none add more documentation use thrift 0.13.0 use a new connection on rollback log original error before rollback use information from https://www.ericlin.me/2015/07/how-to-configue-session-timeout-in-hive/ add 'hive_configuration' member to IndeximaHook change default time out to None use a single cursor instance per hook process set hive connection serialization encoding 'UTF-8' timeout can be specified with an int or a timedelta use execution_timeout member on operator to set timeout if this one is not specified","title":"2.2.0 ((2019-12-12)"},{"location":"changelog/#210-2019-12-04","text":"manage error return from indexima define IndeximaAirflowPlugin","title":"2.1.0 (2019-12-04)"},{"location":"changelog/#206-2019-12-03","text":"fix usage of connection.extra parameter","title":"2.0.6 (2019-12-03)"},{"location":"changelog/#205-2019-12-03","text":"fix indexima hook: (username/login) field access (auth) decorator applied before usage fix IndeximaLoadDataOperator field access fix redshit uri base","title":"2.0.5 (2019-12-03)"},{"location":"changelog/#204-2019-12-03","text":"fix connection retrieval in get_redshift_load_path_uri fix redshit uri port","title":"2.0.4 (2019-12-03)"},{"location":"changelog/#203-2019-12-03","text":"align dependencies constraint on thrift to pyhive and thrift-sasl","title":"2.0.3 (2019-12-03)"},{"location":"changelog/#202-2019-12-03","text":"unlock fixed python 3.6.4 to ^3.6","title":"2.0.2 (2019-12-03)"},{"location":"changelog/#201-2019-12-03","text":"fix default truncate query","title":"2.0.1 (2019-12-03)"},{"location":"changelog/#200-2019-12-03","text":"escape quote in select query of RedshiftIndexima Operator initiate airflow contrib package complete docstyle introduce uri utilities expose ConnectionDecorator add more example","title":"2.0.0 (2019-12-03)"},{"location":"changelog/#101-2019-11-28","text":"add example remove work in progress","title":"1.0.1 (2019-11-28)"},{"location":"changelog/#100-2019-11-27","text":"initial project structure based on geronimo-iia/template-python add Hook implementation add Simple Operator add pyhive, ... configure documentation add a way to customize credentials retreival (with a prepare connection function handler)","title":"1.0.0 (2019-11-27)"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00b6 This project is based on Geronimo-iaa's Python Template . This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks. Setup \u00b6 Requirements \u00b6 Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Pyenv will manage all our python version. Python: $ pyenv install 3.7.3 Note for MacOS 10.14 user : SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 Poetry: https://poetry.eustace.io/docs/#installation Poetry will manage our dependencies and create our virtual environment for us. Graphviz: macOS: $ brew install graphviz Linux: https://graphviz.org/download Windows: https://graphviz.org/download Needed to generate UML documentation To confirm these system dependencies are configured correctly: $ make doctor Installation \u00b6 Install project dependencies into a virtual environment: $ make install Note: - this target create a dummy file .install . The makefile rule depends on pyproject.toml and poetry.lock file - if for whatever reason, you have to force installation, just remove this .install file and execute a make install Development Tasks \u00b6 Manual \u00b6 Run the tests: $ make test Run static analysis: $ make check Build the documentation: $ make docs Automatic \u00b6 Keep all of the above tasks running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier . Integration With Visual Studio Code \u00b6 Even if we use fabulous tool like pyenv, poetry, ... at the end, we just want to go on, and code. So here, few detail of my installation. .bashrc # init pyenv with default python version if command -v pyenv 1 >/dev/null 2 > & 1 ; then eval \" $( pyenv init - ) \" fi # add poetry in path export PATH = \" $HOME /.poetry/bin: $PATH \" # Add Visual Studio Code (code) export PATH = \" $PATH :/Applications/Visual Studio Code.app/Contents/Resources/app/bin\" poetry configuration: all is let with default settings.virtualenvs.create = true settings.virtualenvs.in-project = false settings.virtualenvs.path = \"/Users/xxxx/Library/Caches/pypoetry/virtualenvs\" repositories = {} As now, i cannot have a working system with 'settings.virtualenvs.in-project' set to true or 'settings.virtualenvs.path' setted with a custom path. How Launch Visual Studio Code within virtual environment created by poetry ? After do a make install , you have to do: poetry shell code . poetry shell will activate project virtual environment. Continuous Integration \u00b6 The CI server will report overall build status: $ make ci Release Tasks \u00b6 Release to PyPI: $ make publishh","title":"Contributing"},{"location":"contributing/#contributing","text":"This project is based on Geronimo-iaa's Python Template . This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks.","title":"Contributing"},{"location":"contributing/#setup","text":"","title":"Setup"},{"location":"contributing/#requirements","text":"Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Pyenv will manage all our python version. Python: $ pyenv install 3.7.3 Note for MacOS 10.14 user : SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 Poetry: https://poetry.eustace.io/docs/#installation Poetry will manage our dependencies and create our virtual environment for us. Graphviz: macOS: $ brew install graphviz Linux: https://graphviz.org/download Windows: https://graphviz.org/download Needed to generate UML documentation To confirm these system dependencies are configured correctly: $ make doctor","title":"Requirements"},{"location":"contributing/#installation","text":"Install project dependencies into a virtual environment: $ make install Note: - this target create a dummy file .install . The makefile rule depends on pyproject.toml and poetry.lock file - if for whatever reason, you have to force installation, just remove this .install file and execute a make install","title":"Installation"},{"location":"contributing/#development-tasks","text":"","title":"Development Tasks"},{"location":"contributing/#manual","text":"Run the tests: $ make test Run static analysis: $ make check Build the documentation: $ make docs","title":"Manual"},{"location":"contributing/#automatic","text":"Keep all of the above tasks running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier .","title":"Automatic"},{"location":"contributing/#integration-with-visual-studio-code","text":"Even if we use fabulous tool like pyenv, poetry, ... at the end, we just want to go on, and code. So here, few detail of my installation. .bashrc # init pyenv with default python version if command -v pyenv 1 >/dev/null 2 > & 1 ; then eval \" $( pyenv init - ) \" fi # add poetry in path export PATH = \" $HOME /.poetry/bin: $PATH \" # Add Visual Studio Code (code) export PATH = \" $PATH :/Applications/Visual Studio Code.app/Contents/Resources/app/bin\" poetry configuration: all is let with default settings.virtualenvs.create = true settings.virtualenvs.in-project = false settings.virtualenvs.path = \"/Users/xxxx/Library/Caches/pypoetry/virtualenvs\" repositories = {} As now, i cannot have a working system with 'settings.virtualenvs.in-project' set to true or 'settings.virtualenvs.path' setted with a custom path. How Launch Visual Studio Code within virtual environment created by poetry ? After do a make install , you have to do: poetry shell code . poetry shell will activate project virtual environment.","title":"Integration With Visual Studio Code"},{"location":"contributing/#continuous-integration","text":"The CI server will report overall build status: $ make ci","title":"Continuous Integration"},{"location":"contributing/#release-tasks","text":"Release to PyPI: $ make publishh","title":"Release Tasks"},{"location":"documentation/","text":"Documentation \u00b6 Note on documentation generation. Tooling \u00b6 mkdocs to generate web site pydocmd (based on mkdocs) to generate API doc from docstyle pyreverse to generate uml diagram Documentation folder \u00b6 under mkdocs folder: 'docs' which keep handle writed doc file, 'docs/api' api generated files folder 'docs/uml' uml gererated diagrams folder 'mkdocs.yaml': configuration file for mkdocs tool Makefile targets \u00b6 Main target: 'docs' call 'mkdocs-site': call 'mkdocs-uml': Generate UML Diagram call 'mkdocs-api': Generate API documentation call 'mkdocs-md': Copy standard document Build web site with mkdocs tool move generated website content into '/docs' folder in order to expose with github page project Cleaning target: '.clean-docs' - Remove all temp files Extract from Makefile \u00b6 DOCS_PATH := mkdocs/docs SITE_PATH := mkdocs/site mkdocs-uml: $(DOCS_PATH)/uml ## Generate UML Diagram $(DOCS_PATH)/uml: $(MODULES) @ mkdir -p $(DOCS_PATH)/uml @ $(RUN) pyreverse $(PACKAGE) -p $(PACKAGE) -a 1 -f ALL -o png --ignore tests @ mv -f packages_$(PACKAGE).png $(DOCS_PATH)/uml/packages.png @ mv -f classes_$(PACKAGE).png $(DOCS_PATH)/uml/classes.png mkdocs-api: $(DOCS_PATH)/api ## Generate API documentation $(DOCS_PATH)/api: $(MODULES) @ mkdir -p $(DOCS_PATH)/api @ cd $(DOCS_PATH)/api; \\ PYTHONPATH=$(shell pwd); \\ $(RUN) pydocmd simple $(PACKAGE)+ > index.md # Add here all other package generation # PYTHONPATH=$(shell pwd) is a workaround to https://github.com/NiklasRosenstein/pydoc-markdown/issues/30 MK_FILES = $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md mkdocs-md: $(MK_FILES) # Copy standard document $(DOCS_PATH)/index.md: README.md @ cp -f README.md $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md: LICENSE.md @ cp -f LICENSE.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md: CHANGELOG.md @ cp -f CHANGELOG.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md: CODE_OF_CONDUCT.md @ cp -f CODE_OF_CONDUCT.md $(DOCS_PATH)/code_of_conduct.md mkdocs-site: mkdocs/mkdocs.yml mkdocs-uml mkdocs-api mkdocs-md ## Build Documentation Site @ cd mkdocs; \\ $(RUN) mkdocs build @ rm -rf docs/ @ mv mkdocs/site docs/ .clean-docs: ## remove all generated files @ rm -rf mkdocs/site @ rm -rf $(DOCS_PATH)/uml @ rm -rf $(DOCS_PATH)/api @ rm -rf $(DOCS_PATH)/index.md @ rm -rf $(DOCS_PATH)/license.md @ rm -rf $(DOCS_PATH)/changelog.md @ rm -rf $(DOCS_PATH)/code_of_conduct.md docs: mkdocs-site ## Generate documentation and UML","title":"Documentation"},{"location":"documentation/#documentation","text":"Note on documentation generation.","title":"Documentation"},{"location":"documentation/#tooling","text":"mkdocs to generate web site pydocmd (based on mkdocs) to generate API doc from docstyle pyreverse to generate uml diagram","title":"Tooling"},{"location":"documentation/#documentation-folder","text":"under mkdocs folder: 'docs' which keep handle writed doc file, 'docs/api' api generated files folder 'docs/uml' uml gererated diagrams folder 'mkdocs.yaml': configuration file for mkdocs tool","title":"Documentation folder"},{"location":"documentation/#makefile-targets","text":"Main target: 'docs' call 'mkdocs-site': call 'mkdocs-uml': Generate UML Diagram call 'mkdocs-api': Generate API documentation call 'mkdocs-md': Copy standard document Build web site with mkdocs tool move generated website content into '/docs' folder in order to expose with github page project Cleaning target: '.clean-docs' - Remove all temp files","title":"Makefile targets"},{"location":"documentation/#extract-from-makefile","text":"DOCS_PATH := mkdocs/docs SITE_PATH := mkdocs/site mkdocs-uml: $(DOCS_PATH)/uml ## Generate UML Diagram $(DOCS_PATH)/uml: $(MODULES) @ mkdir -p $(DOCS_PATH)/uml @ $(RUN) pyreverse $(PACKAGE) -p $(PACKAGE) -a 1 -f ALL -o png --ignore tests @ mv -f packages_$(PACKAGE).png $(DOCS_PATH)/uml/packages.png @ mv -f classes_$(PACKAGE).png $(DOCS_PATH)/uml/classes.png mkdocs-api: $(DOCS_PATH)/api ## Generate API documentation $(DOCS_PATH)/api: $(MODULES) @ mkdir -p $(DOCS_PATH)/api @ cd $(DOCS_PATH)/api; \\ PYTHONPATH=$(shell pwd); \\ $(RUN) pydocmd simple $(PACKAGE)+ > index.md # Add here all other package generation # PYTHONPATH=$(shell pwd) is a workaround to https://github.com/NiklasRosenstein/pydoc-markdown/issues/30 MK_FILES = $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md mkdocs-md: $(MK_FILES) # Copy standard document $(DOCS_PATH)/index.md: README.md @ cp -f README.md $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md: LICENSE.md @ cp -f LICENSE.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md: CHANGELOG.md @ cp -f CHANGELOG.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md: CODE_OF_CONDUCT.md @ cp -f CODE_OF_CONDUCT.md $(DOCS_PATH)/code_of_conduct.md mkdocs-site: mkdocs/mkdocs.yml mkdocs-uml mkdocs-api mkdocs-md ## Build Documentation Site @ cd mkdocs; \\ $(RUN) mkdocs build @ rm -rf docs/ @ mv mkdocs/site docs/ .clean-docs: ## remove all generated files @ rm -rf mkdocs/site @ rm -rf $(DOCS_PATH)/uml @ rm -rf $(DOCS_PATH)/api @ rm -rf $(DOCS_PATH)/index.md @ rm -rf $(DOCS_PATH)/license.md @ rm -rf $(DOCS_PATH)/changelog.md @ rm -rf $(DOCS_PATH)/code_of_conduct.md docs: mkdocs-site ## Generate documentation and UML","title":"Extract from Makefile"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2019, Jerome Guibert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"api/connection/","text":"airflow_indexima.connection \u00b6 Define a decorator connection function profile. Implementation can be used tp customized a connection like retreive credentials from other backeng like aws ssm. ConnectionDecorator = Callable[[Connection], Connection] apply_hive_extra_setting \u00b6 apply_hive_extra_setting ( connection : airflow . models . Connection , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None ) -> airflow . models . Connection Apply extra settings on hive connection. Parameters: connection (Connection): airflow connection auth (Optional[str]): optional authentication mode kerberos_service_name (Optional[str]): optional kerberos service name timeout_seconds (Optional[int]): optional define the socket timeout in second socket_keepalive (Optional[bool]): optional enable TCP keepalive. Returns (Connection) : configured airflow Connection instance extract_hive_extra_setting \u00b6 extract_hive_extra_setting ( connection : airflow . models . Connection ) -> Tuple [ Union [ str , NoneType ], Union [ str , NoneType ], Union [ int , NoneType ], Union [ bool , NoneType ]] Extract extra settings. Parameters: connection (Connection): airflow connection Returns (Tuple[Optional[str], Optional[str], Optional[int], Optional[bool]]) : a tuple (auth, kerberos_service_name, timeout_seconds, socket_keepalive)","title":"Connection Utilities"},{"location":"api/connection/#airflow_indeximaconnection","text":"Define a decorator connection function profile. Implementation can be used tp customized a connection like retreive credentials from other backeng like aws ssm. ConnectionDecorator = Callable[[Connection], Connection]","title":"airflow_indexima.connection"},{"location":"api/connection/#apply_hive_extra_setting","text":"apply_hive_extra_setting ( connection : airflow . models . Connection , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None ) -> airflow . models . Connection Apply extra settings on hive connection. Parameters: connection (Connection): airflow connection auth (Optional[str]): optional authentication mode kerberos_service_name (Optional[str]): optional kerberos service name timeout_seconds (Optional[int]): optional define the socket timeout in second socket_keepalive (Optional[bool]): optional enable TCP keepalive. Returns (Connection) : configured airflow Connection instance","title":"apply_hive_extra_setting"},{"location":"api/connection/#extract_hive_extra_setting","text":"extract_hive_extra_setting ( connection : airflow . models . Connection ) -> Tuple [ Union [ str , NoneType ], Union [ str , NoneType ], Union [ int , NoneType ], Union [ bool , NoneType ]] Extract extra settings. Parameters: connection (Connection): airflow connection Returns (Tuple[Optional[str], Optional[str], Optional[int], Optional[bool]]) : a tuple (auth, kerberos_service_name, timeout_seconds, socket_keepalive)","title":"extract_hive_extra_setting"},{"location":"api/hive_transport/","text":"airflow_indexima.hive_transport \u00b6 Define hive transport function utilities. PyHive supported authentication mode: NONE CUSTOM LDAP KERBEROS NOSASL Extra configuration: socket timeout_seconds socket keepalive create_transport_socket \u00b6 create_transport_socket ( host : str , port : Union [ int , NoneType ], timeout_seconds : Union [ int , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None ) -> thrift . transport . TSocket . TSocket Create a transport socket. This function expose TSocket configuration option (more for clarity rather than anything else). Parameters host (str) : The host to connect to. port (int) : The (TCP) port to connect to. timeout_seconds (Optional[int]) : define the socket timeout in second socket_keepalive (Optional[bool]) : enable TCP keepalive, default False. Returns (TSocket) : transport socket instance. create_hive_plain_transport \u00b6 create_hive_plain_transport ( socket : thrift . transport . TSocket . TSocket , username : str , password : Union [ str , NoneType ] = None ) -> thrift_sasl . TSaslClientTransport Create a TSaslClientTransport in 'PLAIN' authentication mode. Parameters socket (TSocket) : socket to use username (str) : username to login password (Optional[str]) : optional password to login Returns (TSaslClientTransport) : transport instance create_hive_gssapi_transport \u00b6 create_hive_gssapi_transport ( socket : thrift . transport . TSocket . TSocket , service_name : str ) -> thrift_sasl . TSaslClientTransport Create a TSaslClientTransport in 'GSSAPI' authentication mode. Parameters socket (TSocket) : socket to use service_name (str) : kerberos service name Returns (TSaslClientTransport) : transport instance create_hive_nosasl_transport \u00b6 create_hive_nosasl_transport ( socket : thrift . transport . TSocket . TSocket ) -> thrift . transport . TTransport . TBufferedTransport Create a TBufferedTransport in 'NOSASL' authentication mode. NOSASL corresponds to hive.server2.authentication=NOSASL in hive-site.xml Parameters socket (TSocket) : socket to use Returns (TBufferedTransport) : transport instance check_hive_connection_parameters \u00b6 check_hive_connection_parameters ( auth : Union [ str , NoneType ] = None , username : Union [ str , NoneType ] = None , password : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None ) Check hive connection parameters. Parameters auth (Optional[str]) : authentication mode) username (Optional[str]) : optional username to login password (Optional[str]) : optional password to login kerberos_service_name (Optional[str]) : optional service name Raises (ValueError) : if something is wrong create_hive_transport \u00b6 create_hive_transport ( host : str , port : Union [ int , NoneType ] = None , timeout_seconds : Union [ int , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , auth : Union [ str , NoneType ] = None , username : Union [ str , NoneType ] = None , password : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None ) -> thrift_sasl . TSaslClientTransport Create a TSaslClientTransport. Implementation is heavly based on pyhive.hive.Connection constructor. Parameters host (str) : The host to connect to. port (int) : The (TCP) port to connect to. timeout_seconds (Optional[int]) : define the socket timeout in second (default 60) socket_keepalive (Optional[bool]) : enable TCP keepalive, default off. auth (Optional[str]) : authentication mode (Defaul 'NONE') username (Optional[str]) : optional username to login password (Optional[str]) : optional password to login kerberos_service_name (Optional[str]) : optional kerberos service name Returns (TSaslClientTransport) : transport instance Raises (ValueError) : if something is wrong","title":"Hive Transport Utilities"},{"location":"api/hive_transport/#airflow_indeximahive_transport","text":"Define hive transport function utilities. PyHive supported authentication mode: NONE CUSTOM LDAP KERBEROS NOSASL Extra configuration: socket timeout_seconds socket keepalive","title":"airflow_indexima.hive_transport"},{"location":"api/hive_transport/#create_transport_socket","text":"create_transport_socket ( host : str , port : Union [ int , NoneType ], timeout_seconds : Union [ int , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None ) -> thrift . transport . TSocket . TSocket Create a transport socket. This function expose TSocket configuration option (more for clarity rather than anything else). Parameters host (str) : The host to connect to. port (int) : The (TCP) port to connect to. timeout_seconds (Optional[int]) : define the socket timeout in second socket_keepalive (Optional[bool]) : enable TCP keepalive, default False. Returns (TSocket) : transport socket instance.","title":"create_transport_socket"},{"location":"api/hive_transport/#create_hive_plain_transport","text":"create_hive_plain_transport ( socket : thrift . transport . TSocket . TSocket , username : str , password : Union [ str , NoneType ] = None ) -> thrift_sasl . TSaslClientTransport Create a TSaslClientTransport in 'PLAIN' authentication mode. Parameters socket (TSocket) : socket to use username (str) : username to login password (Optional[str]) : optional password to login Returns (TSaslClientTransport) : transport instance","title":"create_hive_plain_transport"},{"location":"api/hive_transport/#create_hive_gssapi_transport","text":"create_hive_gssapi_transport ( socket : thrift . transport . TSocket . TSocket , service_name : str ) -> thrift_sasl . TSaslClientTransport Create a TSaslClientTransport in 'GSSAPI' authentication mode. Parameters socket (TSocket) : socket to use service_name (str) : kerberos service name Returns (TSaslClientTransport) : transport instance","title":"create_hive_gssapi_transport"},{"location":"api/hive_transport/#create_hive_nosasl_transport","text":"create_hive_nosasl_transport ( socket : thrift . transport . TSocket . TSocket ) -> thrift . transport . TTransport . TBufferedTransport Create a TBufferedTransport in 'NOSASL' authentication mode. NOSASL corresponds to hive.server2.authentication=NOSASL in hive-site.xml Parameters socket (TSocket) : socket to use Returns (TBufferedTransport) : transport instance","title":"create_hive_nosasl_transport"},{"location":"api/hive_transport/#check_hive_connection_parameters","text":"check_hive_connection_parameters ( auth : Union [ str , NoneType ] = None , username : Union [ str , NoneType ] = None , password : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None ) Check hive connection parameters. Parameters auth (Optional[str]) : authentication mode) username (Optional[str]) : optional username to login password (Optional[str]) : optional password to login kerberos_service_name (Optional[str]) : optional service name Raises (ValueError) : if something is wrong","title":"check_hive_connection_parameters"},{"location":"api/hive_transport/#create_hive_transport","text":"create_hive_transport ( host : str , port : Union [ int , NoneType ] = None , timeout_seconds : Union [ int , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , auth : Union [ str , NoneType ] = None , username : Union [ str , NoneType ] = None , password : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None ) -> thrift_sasl . TSaslClientTransport Create a TSaslClientTransport. Implementation is heavly based on pyhive.hive.Connection constructor. Parameters host (str) : The host to connect to. port (int) : The (TCP) port to connect to. timeout_seconds (Optional[int]) : define the socket timeout in second (default 60) socket_keepalive (Optional[bool]) : enable TCP keepalive, default off. auth (Optional[str]) : authentication mode (Defaul 'NONE') username (Optional[str]) : optional username to login password (Optional[str]) : optional password to login kerberos_service_name (Optional[str]) : optional kerberos service name Returns (TSaslClientTransport) : transport instance Raises (ValueError) : if something is wrong","title":"create_hive_transport"},{"location":"api/hooks/","text":"airflow_indexima.hooks.indexima \u00b6 Indexima hook module definition. IndeximaHook \u00b6 IndeximaHook ( self , indexima_conn_id : str , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) Indexima hook implementation. This implementation can be used as a context manager like this: with IndeximaHook ( ... ) as hook : hook . run ( 'select ...' ) This implementation can be customized with a connection_decorator function which must have this profile: Callable[[Connection], Connection] (alias ConnectionDecorator) In this handler you could retreive credentials from other backeng like aws ssm. hive_configuration \u00b6 Return hive configuration. Returns (Dict[str, str]) : A dictionary of Hive settings (functionally same as the set command) get_conn \u00b6 IndeximaHook . get_conn ( self ) -> pyhive . hive . Connection Return a hive connection. Returns (hive.Connection) : the hive connection get_records \u00b6 IndeximaHook . get_records ( self , sql : str ) -> pyhive . hive . Cursor Execute query and return curror. (alias of run method) run \u00b6 IndeximaHook . run ( self , sql : str ) -> pyhive . hive . Cursor Execute query and return curror. check_error_of_load_query \u00b6 IndeximaHook . check_error_of_load_query ( self , cursor : pyhive . hive . Cursor ) Raise error if a load query fail. Parameters cursor : cursor returned by load path query. Raises (RuntimeError) : if an error is found commit \u00b6 IndeximaHook . commit ( self , tablename : str ) Execute a simple commit on table. Parameters tablename (str) : table name to commit rollback \u00b6 IndeximaHook . rollback ( self , tablename : str ) Execute a simple rollback on table. Parameters tablename (str) : table name to rollback close \u00b6 IndeximaHook . close ( self ) Close current connection.","title":"Hooks"},{"location":"api/hooks/#airflow_indeximahooksindexima","text":"Indexima hook module definition.","title":"airflow_indexima.hooks.indexima"},{"location":"api/hooks/#indeximahook","text":"IndeximaHook ( self , indexima_conn_id : str , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) Indexima hook implementation. This implementation can be used as a context manager like this: with IndeximaHook ( ... ) as hook : hook . run ( 'select ...' ) This implementation can be customized with a connection_decorator function which must have this profile: Callable[[Connection], Connection] (alias ConnectionDecorator) In this handler you could retreive credentials from other backeng like aws ssm.","title":"IndeximaHook"},{"location":"api/hooks/#hive_configuration","text":"Return hive configuration. Returns (Dict[str, str]) : A dictionary of Hive settings (functionally same as the set command)","title":"hive_configuration"},{"location":"api/hooks/#get_conn","text":"IndeximaHook . get_conn ( self ) -> pyhive . hive . Connection Return a hive connection. Returns (hive.Connection) : the hive connection","title":"get_conn"},{"location":"api/hooks/#get_records","text":"IndeximaHook . get_records ( self , sql : str ) -> pyhive . hive . Cursor Execute query and return curror. (alias of run method)","title":"get_records"},{"location":"api/hooks/#run","text":"IndeximaHook . run ( self , sql : str ) -> pyhive . hive . Cursor Execute query and return curror.","title":"run"},{"location":"api/hooks/#check_error_of_load_query","text":"IndeximaHook . check_error_of_load_query ( self , cursor : pyhive . hive . Cursor ) Raise error if a load query fail. Parameters cursor : cursor returned by load path query. Raises (RuntimeError) : if an error is found","title":"check_error_of_load_query"},{"location":"api/hooks/#commit","text":"IndeximaHook . commit ( self , tablename : str ) Execute a simple commit on table. Parameters tablename (str) : table name to commit","title":"commit"},{"location":"api/hooks/#rollback","text":"IndeximaHook . rollback ( self , tablename : str ) Execute a simple rollback on table. Parameters tablename (str) : table name to rollback","title":"rollback"},{"location":"api/hooks/#close","text":"IndeximaHook . close ( self ) Close current connection.","title":"close"},{"location":"api/indexima/","text":"airflow_indexima.indexima \u00b6 Define Indexima Airflow plugin. This will create a hook, and an operator accessible at: airflow.hooks.indexima.IndeximaHook airflow.operators.indexima.IndeximaQueryRunnerOperator airflow.operators.indexima.IndeximaLoadDataOperator see https://airflow.apache.org/docs/stable/plugins.html IndeximaAirflowPlugin \u00b6 IndeximaAirflowPlugin ( self , / , * args , ** kwargs ) hooks \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items name \u00b6 str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. operators \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"Airflow indexima plugin"},{"location":"api/indexima/#airflow_indeximaindexima","text":"Define Indexima Airflow plugin. This will create a hook, and an operator accessible at: airflow.hooks.indexima.IndeximaHook airflow.operators.indexima.IndeximaQueryRunnerOperator airflow.operators.indexima.IndeximaLoadDataOperator see https://airflow.apache.org/docs/stable/plugins.html","title":"airflow_indexima.indexima"},{"location":"api/indexima/#indeximaairflowplugin","text":"IndeximaAirflowPlugin ( self , / , * args , ** kwargs )","title":"IndeximaAirflowPlugin"},{"location":"api/indexima/#hooks","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"hooks"},{"location":"api/indexima/#name","text":"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"name"},{"location":"api/indexima/#operators","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"operators"},{"location":"api/operators/","text":"airflow_indexima.operators.indexima \u00b6 Indexima operators module definition. IndeximaHookBasedOperator \u00b6 IndeximaHookBasedOperator ( self , task_id : str , indexima_conn_id : str , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) Our base class for indexima operator. This class act as a wrapper on IndeximaHook. ui_color \u00b6 str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. get_hook \u00b6 IndeximaHookBasedOperator . get_hook ( self ) -> airflow_indexima . hooks . indexima . IndeximaHook Return a configured IndeximaHook instance. IndeximaQueryRunnerOperator \u00b6 IndeximaQueryRunnerOperator ( self , task_id : str , sql_query : str , indexima_conn_id : str , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) A simple query executor. template_fields \u00b6 tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. execute \u00b6 IndeximaQueryRunnerOperator . execute ( self , context ) Execute sql query. Parameters context : dag context IndeximaLoadDataOperator \u00b6 IndeximaLoadDataOperator ( self , task_id : str , indexima_conn_id : str , target_table : str , load_path_uri : str , truncate : bool = False , truncate_sql : Union [ str , NoneType ] = None , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , source_select_query : Union [ str , NoneType ] = None , format_query : Union [ str , NoneType ] = None , prefix_query : Union [ str , NoneType ] = None , skip_lines : Union [ int , NoneType ] = None , no_check : Union [ bool , NoneType ] = False , limit : Union [ int , NoneType ] = None , locale : Union [ str , NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) Indexima load data operator. Operations: 1. truncate target_table (false per default) 2. load source_select_query into target_table using redshift_user_name credential 4. commit/rollback target_table All fields ('target_table', 'load_path_uri', 'source_select_query', 'truncate_sql', 'format_query', 'prefix_query', 'skip_lines', 'no_check', 'limit', 'locale') support airflow macro. Syntax (see https://indexima.com/support/doc/v.1.6/Load_Data/Load_Data_Inpath.html ) LOAD DATA INPATH 'path_of_the_data_source' INTO TABLE my_data_space [ FORMAT 'separator' / ORC / PARQUET / JSON ]; [ PREFIX 'value1 \\t value2 \\t ... \\t' ] [ QUERY \"my_SQL_Query\" ] [ SKIP lines ] [ NOCHECK ] [ LIMIT n_lines ] [ LOCALE 'FR' ] template_fields \u00b6 tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. generate_load_data_query \u00b6 IndeximaLoadDataOperator . generate_load_data_query ( self ) Generate 'load data' sql query. Returns (str) : load data sql query execute \u00b6 IndeximaLoadDataOperator . execute ( self , context ) Process executor.","title":"Operator"},{"location":"api/operators/#airflow_indeximaoperatorsindexima","text":"Indexima operators module definition.","title":"airflow_indexima.operators.indexima"},{"location":"api/operators/#indeximahookbasedoperator","text":"IndeximaHookBasedOperator ( self , task_id : str , indexima_conn_id : str , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) Our base class for indexima operator. This class act as a wrapper on IndeximaHook.","title":"IndeximaHookBasedOperator"},{"location":"api/operators/#ui_color","text":"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"ui_color"},{"location":"api/operators/#get_hook","text":"IndeximaHookBasedOperator . get_hook ( self ) -> airflow_indexima . hooks . indexima . IndeximaHook Return a configured IndeximaHook instance.","title":"get_hook"},{"location":"api/operators/#indeximaqueryrunneroperator","text":"IndeximaQueryRunnerOperator ( self , task_id : str , sql_query : str , indexima_conn_id : str , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) A simple query executor.","title":"IndeximaQueryRunnerOperator"},{"location":"api/operators/#template_fields","text":"tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object.","title":"template_fields"},{"location":"api/operators/#execute","text":"IndeximaQueryRunnerOperator . execute ( self , context ) Execute sql query. Parameters context : dag context","title":"execute"},{"location":"api/operators/#indeximaloaddataoperator","text":"IndeximaLoadDataOperator ( self , task_id : str , indexima_conn_id : str , target_table : str , load_path_uri : str , truncate : bool = False , truncate_sql : Union [ str , NoneType ] = None , connection_decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None , source_select_query : Union [ str , NoneType ] = None , format_query : Union [ str , NoneType ] = None , prefix_query : Union [ str , NoneType ] = None , skip_lines : Union [ int , NoneType ] = None , no_check : Union [ bool , NoneType ] = False , limit : Union [ int , NoneType ] = None , locale : Union [ str , NoneType ] = None , dry_run : Union [ bool , NoneType ] = False , auth : Union [ str , NoneType ] = None , kerberos_service_name : Union [ str , NoneType ] = None , timeout_seconds : Union [ int , datetime . timedelta , NoneType ] = None , socket_keepalive : Union [ bool , NoneType ] = None , * args , ** kwargs ) Indexima load data operator. Operations: 1. truncate target_table (false per default) 2. load source_select_query into target_table using redshift_user_name credential 4. commit/rollback target_table All fields ('target_table', 'load_path_uri', 'source_select_query', 'truncate_sql', 'format_query', 'prefix_query', 'skip_lines', 'no_check', 'limit', 'locale') support airflow macro. Syntax (see https://indexima.com/support/doc/v.1.6/Load_Data/Load_Data_Inpath.html ) LOAD DATA INPATH 'path_of_the_data_source' INTO TABLE my_data_space [ FORMAT 'separator' / ORC / PARQUET / JSON ]; [ PREFIX 'value1 \\t value2 \\t ... \\t' ] [ QUERY \"my_SQL_Query\" ] [ SKIP lines ] [ NOCHECK ] [ LIMIT n_lines ] [ LOCALE 'FR' ]","title":"IndeximaLoadDataOperator"},{"location":"api/operators/#template_fields_1","text":"tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object.","title":"template_fields"},{"location":"api/operators/#generate_load_data_query","text":"IndeximaLoadDataOperator . generate_load_data_query ( self ) Generate 'load data' sql query. Returns (str) : load data sql query","title":"generate_load_data_query"},{"location":"api/operators/#execute_1","text":"IndeximaLoadDataOperator . execute ( self , context ) Process executor.","title":"execute"},{"location":"api/uri/","text":"airflow_indexima.uri.factory \u00b6 URI utilities. define_load_path_factory \u00b6 define_load_path_factory ( conn_id : str , decorator : Callable [[ airflow . models . Connection ], airflow . models . Connection ], factory : Callable [[ str , Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ]], str ]) -> Callable [[], str ] Create an uri factory function with UriFactory profile. Example: def my_decorator(conn:Connection) -> Connection: ... return conn decorated_redshift_uri_factory = define_load_path_factory( decorator=my_decorator, factory=get_redshift_load_path_uri ) Parameter conn_id (str): connection identifier of data source decorator (ConnectionDecorator): Connection decorator factory (UriGeneratorFactory): uri decorated factory Return (UriFactory): function used as a macro to get load uri path airflow_indexima.uri.jdbc \u00b6 Define an uri generator for redshift. get_jdbc_load_path_uri \u00b6 get_jdbc_load_path_uri ( jdbc_type : str , connection_id : str , decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None ) -> str Return jdbc load path uri from a connection_id. Parameters jdbc_type (str) : jdbc connection type connection_id (str) : source connection identifier decorator (Optional[ConnectionDecorator]) : optinal connection decorator Returns (str) load path uri get_redshift_load_path_uri \u00b6 get_redshift_load_path_uri ( connection_id : str , decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None ) -> str Return redshift load path uri from a connection_id. Example: get_redshift_load_path_uri(connection_id='my_conn') >> 'jdbc:redshift://my-db:5439/db_client?ssl=true&user=airflow-user&password=XXXXXXXX' Parameters connection_id (str) : source connection identifier decorator (Optional[ConnectionDecorator]) : optinal connection decorator Returns (str) load path uri get_postgresql_load_path_uri \u00b6 get_postgresql_load_path_uri ( connection_id : str , decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None ) -> str Return postgresql load path uri from a connection_id. Example: get_postgresql_load_path_uri(connection_id='my_conn') >> 'jdbc:postgresql://my-db:5432/db_client?ssl=true&user=airflow-user&password=XXXXXXXX' Parameters connection_id (str) : source connection identifier decorator (Optional[ConnectionDecorator]) : optinal connection decorator Returns (str) load path uri","title":"URI Utilities"},{"location":"api/uri/#airflow_indeximaurifactory","text":"URI utilities.","title":"airflow_indexima.uri.factory"},{"location":"api/uri/#define_load_path_factory","text":"define_load_path_factory ( conn_id : str , decorator : Callable [[ airflow . models . Connection ], airflow . models . Connection ], factory : Callable [[ str , Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ]], str ]) -> Callable [[], str ] Create an uri factory function with UriFactory profile. Example: def my_decorator(conn:Connection) -> Connection: ... return conn decorated_redshift_uri_factory = define_load_path_factory( decorator=my_decorator, factory=get_redshift_load_path_uri ) Parameter conn_id (str): connection identifier of data source decorator (ConnectionDecorator): Connection decorator factory (UriGeneratorFactory): uri decorated factory Return (UriFactory): function used as a macro to get load uri path","title":"define_load_path_factory"},{"location":"api/uri/#airflow_indeximaurijdbc","text":"Define an uri generator for redshift.","title":"airflow_indexima.uri.jdbc"},{"location":"api/uri/#get_jdbc_load_path_uri","text":"get_jdbc_load_path_uri ( jdbc_type : str , connection_id : str , decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None ) -> str Return jdbc load path uri from a connection_id. Parameters jdbc_type (str) : jdbc connection type connection_id (str) : source connection identifier decorator (Optional[ConnectionDecorator]) : optinal connection decorator Returns (str) load path uri","title":"get_jdbc_load_path_uri"},{"location":"api/uri/#get_redshift_load_path_uri","text":"get_redshift_load_path_uri ( connection_id : str , decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None ) -> str Return redshift load path uri from a connection_id. Example: get_redshift_load_path_uri(connection_id='my_conn') >> 'jdbc:redshift://my-db:5439/db_client?ssl=true&user=airflow-user&password=XXXXXXXX' Parameters connection_id (str) : source connection identifier decorator (Optional[ConnectionDecorator]) : optinal connection decorator Returns (str) load path uri","title":"get_redshift_load_path_uri"},{"location":"api/uri/#get_postgresql_load_path_uri","text":"get_postgresql_load_path_uri ( connection_id : str , decorator : Union [ Callable [[ airflow . models . Connection ], airflow . models . Connection ], NoneType ] = None ) -> str Return postgresql load path uri from a connection_id. Example: get_postgresql_load_path_uri(connection_id='my_conn') >> 'jdbc:postgresql://my-db:5432/db_client?ssl=true&user=airflow-user&password=XXXXXXXX' Parameters connection_id (str) : source connection identifier decorator (Optional[ConnectionDecorator]) : optinal connection decorator Returns (str) load path uri","title":"get_postgresql_load_path_uri"}]}